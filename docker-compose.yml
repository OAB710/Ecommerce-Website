version: '3.8'

services:
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: admin_service
    ports:
      - "5174:5174"
    environment:
      NODE_ENV: development
    command: ["npm", "run", "dev", "--", "--host", "--port", "5174"]
    networks:
      - app_network

  frontend:
    build:
      context: ./Front End
      dockerfile: Dockerfile
    container_name: frontend_service
    ports:
      - "5173:5173"
    environment:
      NODE_ENV: development
    command: ["npm", "run", "dev", "--", "--host", "--port", "5173"]
    networks:
      - app_network

  backend_primary:
    build:
      context: ./Back End
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
    command: ["node", "index.js"]
    ports:
      - "4000:4000"  # Expose one backend replica on port 4000 for direct access
    networks:
      - app_network

  backend_replica_1:
    build:
      context: ./Back End
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
    command: ["node", "index.js"]
    ports:
      - "4001:4000"  # Replica 1 exposed on port 4001
    networks:
      - app_network

  backend_replica_2:
    build:
      context: ./Back End
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
    command: ["node", "index.js"]
    ports:
      - "4002:4000"  # Replica 2 exposed on port 4002
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: nginx_service
    ports:
      - "80:80"  # Expose port 80 of nginx to the host machine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Bind the custom nginx config file
    depends_on:
      - backend_primary
      - backend_replica_1
      - backend_replica_2
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis_service
    ports:
      - "6379:6379"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
